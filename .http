@host=http://localhost:3000

### GET /books
GET {{host}}/books

### Get existing book
GET {{host}}/books/3

### Get nonexistent book
GET {{host}}/books/18

### Add a new book
POST {{host}}/books/
Content-Type: application/json

{
  "title": "New Book"
}

### Incorrectly a new book
POST {{host}}/books/
Content-Type: application/json

{
  "titl": "Wrong New Book"
}

### Update book
PUT {{host}}/books/3
Content-Type: application/json

{
  "title": "Updated Book"
}

### Update nonexistent book
PUT {{host}}/books/18
Content-Type: application/json

{
  "title": "Wrong Updated Book"
}

### Incorrectly update book
PUT {{host}}/books/3
Content-Type: application/json

{
  "tile": "Wrong Updated Book"
}

### Delete existing book
DELETE {{host}}/books/9

### Delete nonexistent book
DELETE {{host}}/books/18

### Send an array of all the books
router.get("/", async (req, res, next) => {
  try {
    const books = await prisma.book.findMany();
    res.json(books);
  } catch (e) {
    next(e);
  }
});

### send a single book with the specified id
router.get("/:id", async (req, res, next) => {
  const { id } = req.params;

  try {
    // `id` has to be converted into a number before looking for it!
    const book = await prisma.book.findUnique({ where: { id: +id } });
    if (book) {
      res.json(book);
    } else {
      next({ status: 404, message: `Book with id ${id} does not exist.` });
    }
  } catch (e) {
    next(e);
  }
});